name: CI-Typescript
on:
  pull_request:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force build all lambdas (ignore change detection)'
        type: boolean
        default: false
        required: false
  push:
    branches:
      - main

# Ensure we only ever have one build running at a time.
# If we push twice in quick succession, the first build will be stopped once the second starts.
# This avoids multiple deploys happening in quick succession causing AWS rate exceeded errors
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      global-changes: ${{ steps.detect-lambda-changes.outputs.global-changes }}
      individual-lambdas-changed: ${{ steps.detect-lambda-changes.outputs.individual-lambdas-changed }}
      any-lambda-changed: ${{ steps.check-lambdas.outputs.any-changed }}
      lambdas-to-build: ${{ steps.check-lambdas.outputs.lambdas-to-build }}
      all-typescript-lambdas: ${{ steps.discover-lambdas.outputs.lambdas }}
    steps:
      - uses: actions/checkout@v5
      - name: Discover TypeScript lambdas
        id: discover-lambdas
        run: |
          # Find all directories in handlers/ that contain package.json (TypeScript lambdas)
          typescript_lambdas=()
          for dir in handlers/*/; do
            if [[ -f "$dir/package.json" ]]; then
              # Extract directory name without handlers/ prefix and trailing /
              lambda_name=$(basename "$dir")
              typescript_lambdas+=("\"$lambda_name\"")
            fi
          done
          
          # Convert to JSON array
          lambdas_json="[$(IFS=,; echo "${typescript_lambdas[*]}")]"
          echo "lambdas=$lambdas_json" >> $GITHUB_OUTPUT
          echo "INFO: Discovered TypeScript lambdas: $lambdas_json"
      - name: Detect changed lambdas
        id: detect-lambda-changes
        run: |
          # Get the list of changed files
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1 HEAD || echo "")
          echo "DEBUG: Changed files: $changed_files"
          
          # Get list of TypeScript lambdas for reference
          all_typescript_lambdas='${{ steps.discover-lambdas.outputs.lambdas }}'
          typescript_lambda_names=$(echo "$all_typescript_lambdas" | jq -r '.[]')
          
          # Check for global changes (anything outside handlers/)
          global_changes=false
          
          # Check for changes outside handlers/ directory
          if echo "$changed_files" | grep -qv '^handlers/'; then
            global_changes=true
            echo "INFO: Global changes detected (files outside handlers/)"
          fi
          
          echo "global-changes=$global_changes" >> $GITHUB_OUTPUT
          
          # Find which TypeScript lambdas have changes
          changed_lambdas=()
          scala_lambda_changes=false
          
          for lambda_name in $typescript_lambda_names; do
            if echo "$changed_files" | grep -q "^handlers/$lambda_name/"; then
              changed_lambdas+=("\"$lambda_name\"")
              echo "INFO: Changes detected in TypeScript lambda: $lambda_name"
            fi
          done
          
          # Check if there are any changes to Scala lambdas (for informational purposes)
          for file in $changed_files; do
            if [[ "$file" =~ ^handlers/([^/]+)/ ]]; then
              lambda_dir="${BASH_REMATCH[1]}"
              # If this lambda is not in our TypeScript list, it's a Scala lambda
              if ! echo "$typescript_lambda_names" | grep -q "^$lambda_dir$"; then
                scala_lambda_changes=true
                echo "INFO: Changes detected in Scala lambda: $lambda_dir (ignored by TypeScript CI)"
              fi
            fi
          done
          
          # Convert to JSON array
          if [ ${#changed_lambdas[@]} -eq 0 ]; then
            changed_lambdas_json="[]"
          else
            changed_lambdas_json="[$(IFS=,; echo "${changed_lambdas[*]}")]"
          fi
          
          echo "individual-lambdas-changed=$changed_lambdas_json" >> $GITHUB_OUTPUT
          echo "INFO: Changed TypeScript lambdas: $changed_lambdas_json"
      - name: Check if any lambda changed
        id: check-lambdas
        run: |
          global_changes="${{ steps.detect-lambda-changes.outputs.global-changes }}"
          individual_lambdas_changed="${{ steps.detect-lambda-changes.outputs.individual-lambdas-changed }}"
          force_build_all="${{ github.event.inputs.force_build_all || 'false' }}"
          all_typescript_lambdas="${{ steps.discover-lambdas.outputs.lambdas }}"
          
          echo "DEBUG: global-changes: $global_changes"
          echo "DEBUG: individual-lambdas-changed: $individual_lambdas_changed"
          echo "DEBUG: force-build-all: $force_build_all"
          echo "DEBUG: all-typescript-lambdas: $all_typescript_lambdas"
          
          # EXCLUSION LOGIC: Build ALL lambdas if:
          # 1. Manual override is enabled, OR
          # 2. ANY changes outside handler directories are detected
          if [[ "$force_build_all" == "true" ]] || [[ "$global_changes" == "true" ]]; then
            echo "any-changed=true" >> $GITHUB_OUTPUT
            # Set all lambdas to be built using dynamically discovered list
            if [[ "$force_build_all" == "true" ]]; then
              echo "INFO: Force build all enabled - building all lambdas"
            else
              echo "INFO: Global changes detected outside handler directories - building all lambdas (failsafe)"
            fi
            echo "lambdas-to-build=$all_typescript_lambdas" >> $GITHUB_OUTPUT
          elif [[ "$individual_lambdas_changed" != "[]" ]]; then
            echo "any-changed=true" >> $GITHUB_OUTPUT
            echo "INFO: Only handler-specific changes detected - building individual lambdas"
            # Only build changed lambdas - ensure it's always a JSON array
            if [[ "$individual_lambdas_changed" == "["* ]]; then
              # Already a JSON array
              echo "DEBUG: Building individual lambdas (array): $individual_lambdas_changed"
              echo "lambdas-to-build=$individual_lambdas_changed" >> $GITHUB_OUTPUT
            else
              # Single string, wrap in array
              echo "DEBUG: Building individual lambdas (single): [\"$individual_lambdas_changed\"]"
              echo "lambdas-to-build=[\"$individual_lambdas_changed\"]" >> $GITHUB_OUTPUT
            fi
          else
            echo "any-changed=false" >> $GITHUB_OUTPUT
            echo "INFO: No relevant changes detected - skipping builds"
            echo "lambdas-to-build=[]" >> $GITHUB_OUTPUT
          fi

  common:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-lambda-changed == 'true'
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - run: npm install --global corepack@0.31.0
      - run: corepack enable
        shell: bash
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter "./modules/**" check-formatting
      - run: pnpm --filter "./modules/**" build
      - run: pnpm --filter "./modules/**" lint
      - run: pnpm --filter "./modules/**" test

  gu-cdk-build:
    needs: common
    if: needs.detect-changes.outputs.any-lambda-changed == 'true'
    strategy:
      matrix:
        subproject: ${{ fromJson(needs.detect-changes.outputs.lambdas-to-build) }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
      - run: npm install --global corepack@0.31.0
      - run: corepack enable
        shell: bash
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter cdk package
      - run: pnpm --filter ${{ matrix.subproject }} package

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GU_RIFF_RAFF_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Upload to Riff-Raff
        uses: guardian/actions-riff-raff@v4
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          roleArn: ${{ secrets.GU_RIFF_RAFF_ROLE_ARN }}
          projectName: support-service-lambdas::${{ matrix.subproject }}
          buildNumberOffset: 7000
          configPath: ./handlers/${{ matrix.subproject }}/riff-raff.yaml
          commentingEnabled: 'false'
          contentDirectories: |
            ${{ matrix.subproject }}-cloudformation:
              - ./cdk/cdk.out
            ${{ matrix.subproject }}:
              - ./handlers/${{ matrix.subproject }}/target/${{ matrix.subproject }}.zip
