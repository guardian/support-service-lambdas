name: CI-Typescript
on:
  pull_request:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force build all lambdas (ignore change detection)'
        type: boolean
        default: false
        required: false
  push:
    branches:
      - main

# Ensure we only ever have one build running at a time.
# If we push twice in quick succession, the first build will be stopped once the second starts.
# This avoids multiple deploys happening in quick succession causing AWS rate exceeded errors
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      global-changes: ${{ steps.filter.outputs.global-changes }}
      individual-lambdas-changed: ${{ steps.filter.outputs.changes }}
      any-lambda-changed: ${{ steps.check-lambdas.outputs.any-changed }}
      lambdas-to-build: ${{ steps.check-lambdas.outputs.lambdas-to-build }}
      all-typescript-lambdas: ${{ steps.discover-lambdas.outputs.lambdas }}
    steps:
      - uses: actions/checkout@v5
      - name: Discover TypeScript lambdas
        id: discover-lambdas
        run: |
          # Find all directories in handlers/ that contain package.json (TypeScript lambdas)
          typescript_lambdas=()
          for dir in handlers/*/; do
            if [[ -f "$dir/package.json" ]]; then
              # Extract directory name without handlers/ prefix and trailing /
              lambda_name=$(basename "$dir")
              typescript_lambdas+=("\"$lambda_name\"")
            fi
          done
          
          # Convert to JSON array
          lambdas_json="[$(IFS=,; echo "${typescript_lambdas[*]}")]"
          echo "lambdas=$lambdas_json" >> $GITHUB_OUTPUT
          echo "INFO: Discovered TypeScript lambdas: $lambdas_json"
      - name: Generate dynamic paths filter
        id: generate-filter
        run: |
          # Get discovered lambdas
          all_typescript_lambdas='${{ steps.discover-lambdas.outputs.lambdas }}'
          
          # Generate filter configuration dynamically
          filter_config="global-changes:\n  - '**'\n  - '!handlers/**'\n"
          
          # Add each TypeScript lambda as a filter
          for lambda_name in $(echo "$all_typescript_lambdas" | jq -r '.[]'); do
            filter_config="${filter_config}${lambda_name}:\n  - 'handlers/${lambda_name}/**'\n"
          done
          
          # Write to temporary file
          echo -e "$filter_config" > /tmp/filters.yml
          echo "Generated filter config:"
          cat /tmp/filters.yml
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: 'json'
          filters: /tmp/filters.yml
      - name: Check if any lambda changed
        id: check-lambdas
        run: |
          global_changes="${{ steps.filter.outputs.global-changes }}"
          all_filter_changes="${{ steps.filter.outputs.changes }}"
          force_build_all="${{ github.event.inputs.force_build_all || 'false' }}"
          all_typescript_lambdas="${{ steps.discover-lambdas.outputs.lambdas }}"
          
          # Filter out 'global-changes' from the individual lambda changes
          individual_lambdas_changed="[]"
          if [[ "$all_filter_changes" != "[]" ]]; then
            # Remove 'global-changes' from the changes array
            individual_lambdas_changed=$(echo "$all_filter_changes" | jq '. - ["global-changes"]')
          fi
          
          echo "DEBUG: global-changes: $global_changes"
          echo "DEBUG: all-filter-changes: $all_filter_changes"
          echo "DEBUG: individual-lambdas-changed: $individual_lambdas_changed"
          echo "DEBUG: force-build-all: $force_build_all"
          echo "DEBUG: all-typescript-lambdas: $all_typescript_lambdas"
          
          # EXCLUSION LOGIC: Build ALL lambdas if:
          # 1. Manual override is enabled, OR
          # 2. ANY changes outside handler directories are detected
          if [[ "$force_build_all" == "true" ]] || [[ "$global_changes" == "true" ]]; then
            echo "any-changed=true" >> $GITHUB_OUTPUT
            # Set all lambdas to be built using dynamically discovered list
            if [[ "$force_build_all" == "true" ]]; then
              echo "INFO: Force build all enabled - building all lambdas"
            else
              echo "INFO: Global changes detected outside handler directories - building all lambdas (failsafe)"
            fi
            echo "lambdas-to-build=$all_typescript_lambdas" >> $GITHUB_OUTPUT
          elif [[ "$individual_lambdas_changed" != "[]" ]]; then
            echo "any-changed=true" >> $GITHUB_OUTPUT
            echo "INFO: Only handler-specific changes detected - building individual lambdas"
            echo "lambdas-to-build=$individual_lambdas_changed" >> $GITHUB_OUTPUT
          else
            echo "any-changed=false" >> $GITHUB_OUTPUT
            echo "INFO: No relevant changes detected - skipping builds"
            echo "lambdas-to-build=[]" >> $GITHUB_OUTPUT
          fi

  common:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-lambda-changed == 'true'
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - run: npm install --global corepack@0.31.0
      - run: corepack enable
        shell: bash
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter "./modules/**" check-formatting
      - run: pnpm --filter "./modules/**" build
      - run: pnpm --filter "./modules/**" lint
      - run: pnpm --filter "./modules/**" test

  gu-cdk-build:
    needs: common
    if: needs.detect-changes.outputs.any-lambda-changed == 'true'
    strategy:
      matrix:
        subproject: ${{ fromJson(needs.detect-changes.outputs.lambdas-to-build) }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
      - run: npm install --global corepack@0.31.0
      - run: corepack enable
        shell: bash
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter cdk package
      - run: pnpm --filter ${{ matrix.subproject }} package

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GU_RIFF_RAFF_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Upload to Riff-Raff
        uses: guardian/actions-riff-raff@v4
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          roleArn: ${{ secrets.GU_RIFF_RAFF_ROLE_ARN }}
          projectName: support-service-lambdas::${{ matrix.subproject }}
          buildNumberOffset: 7000
          configPath: ./handlers/${{ matrix.subproject }}/riff-raff.yaml
          commentingEnabled: 'false'
          contentDirectories: |
            ${{ matrix.subproject }}-cloudformation:
              - ./cdk/cdk.out
            ${{ matrix.subproject }}:
              - ./handlers/${{ matrix.subproject }}/target/${{ matrix.subproject }}.zip
