AWSTemplateFormatVersion: "2010-09-09"
Description: Lambdas used to extract data from Zuora using the Aggregate Query API (AQuA)

Parameters:
    Stage:
        Description: Stage name
        Type: String
        AllowedValues:
            - CODE
            - PROD
        Default: CODE
Mappings:
  StageVariables:
    CODE:
      reportsBucketName : "zuora-reports-code"
    PROD:
      reportsBucketName : "zuora-reports-prod"
Resources:
    ZuoraQuerierRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                             - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: LambdaPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                            - logs:CreateLogGroup
                            - logs:CreateLogStream
                            - logs:PutLogEvents
                            - lambda:InvokeFunction
                            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zuora-reports-querier-${Stage}:log-stream:*"

                - PolicyName: ReadPrivateCredentials
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action: s3:GetObject
                            Resource: !Sub arn:aws:s3:::gu-reader-revenue-private/membership/payment-failure-lambdas/${Stage}/*
    ZuoraResultsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                             - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: LambdaPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                            - logs:CreateLogGroup
                            - logs:CreateLogStream
                            - logs:PutLogEvents
                            - lambda:InvokeFunction
                            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zuora-reports-jobResult-${Stage}:log-stream:*"

                - PolicyName: ReadPrivateCredentials
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action: s3:GetObject
                            Resource: !Sub arn:aws:s3:::gu-reader-revenue-private/membership/payment-failure-lambdas/${Stage}/*
    ZuoraFileFetcherRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                             - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: writeToReportsBucket
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                            - s3:AbortMultipartUpload
                            - s3:DeleteObject
                            - s3:GetObject
                            - s3:GetObjectAcl
                            - s3:GetBucketAcl
                            - s3:ListBucket
                            - s3:PutObject
                            - s3:GetObjectVersion
                            - s3:DeleteObjectVersion
                            Resource: !Sub arn:aws:s3:::${ReportsBucket}/*
                - PolicyName: LambdaPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                            - logs:CreateLogGroup
                            - logs:CreateLogStream
                            - logs:PutLogEvents
                            - lambda:InvokeFunction
                            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zuora-reports-fileFetcher-${Stage}:log-stream:*"

                - PolicyName: ReadPrivateCredentials
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action: s3:GetObject
                            Resource: !Sub arn:aws:s3:::gu-reader-revenue-private/membership/payment-failure-lambdas/${Stage}/*
    ZuoraReports:
        Type: AWS::Lambda::Function
        Properties:
            Description: submit query jobs to Zuora AQuA API
            FunctionName:
                !Sub zuora-reports-querier-${Stage}
            Code:
                S3Bucket: membership-dist
                S3Key: !Sub membership/${Stage}/zuora-reports/zuora-reports.jar
            Handler: com.gu.zuora.reports.Handlers::queryHandler
            Environment:
                Variables:
                  Stage: !Ref Stage
            Role:
                !GetAtt ZuoraQuerierRole.Arn
            MemorySize: 1536
            Runtime: java8
            Timeout: 300
        DependsOn:
        - ZuoraQuerierRole
    ZuoraReportsJobResult:
        Type: AWS::Lambda::Function
        Properties:
            Description: fetch job results from zuora
            FunctionName:
                !Sub zuora-reports-jobResult-${Stage}
            Code:
                S3Bucket: membership-dist
                S3Key: !Sub membership/${Stage}/zuora-reports/zuora-reports.jar
            Handler: com.gu.zuora.reports.Handlers::fetchResultsHandler
            Environment:
                Variables:
                  Stage: !Ref Stage
            Role:
                !GetAtt ZuoraResultsRole.Arn
            MemorySize: 1536
            Runtime: java8
            Timeout: 300
        DependsOn:
        - ZuoraResultsRole
    ZuoraReportsFileFetcher:
        Type: AWS::Lambda::Function
        Properties:
            Description: fetches report files and saves them to s3
            FunctionName:
                !Sub zuora-reports-fileFetcher-${Stage}
            Code:
                S3Bucket: membership-dist
                S3Key: !Sub membership/${Stage}/zuora-reports/zuora-reports.jar
            Handler: com.gu.zuora.reports.Handlers::fetchFileHandler
            Environment:
                Variables:
                  Stage: !Ref Stage
            Role:
                !GetAtt ZuoraFileFetcherRole.Arn
            MemorySize: 1536
            Runtime: java8
            Timeout: 300
        DependsOn:
        - ZuoraFileFetcherRole

    ReportsBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName:
          Fn::FindInMap:
            - StageVariables
            - Ref: Stage
            - "reportsBucketName"
        AccessControl: Private
        LifecycleConfiguration:
          Rules:
            - Id: DeleteAllOldFiles
              Prefix: ""
              Status: Enabled
              ExpirationInDays: 365
            - Id: DeleteOldFiles
              Prefix: ""
              Status: Enabled
              ExpirationInDays: 14
    EncryptBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: ReportsBucket
      Properties:
        Bucket: !Sub ${ReportsBucket}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: DenyIncorrectEncryptionHeader
            Effect: Deny
            Principal: "*"
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${ReportsBucket}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption:
                - AES256
                - aws:kms
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${ReportsBucket}/*
            Condition:
              'Null':
                s3:x-amz-server-side-encryption: 'true'