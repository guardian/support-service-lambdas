Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - PROD
      - CODE
      - DEV
    Default: CODE

Mappings:
  StageMap:
    PROD:
      Schedule: 'rate(30 minutes)'
      SalesforceStage: PROD
      IdentityStage: PROD
      MpapiStage: PROD
      SalesforceUsername: SoftOptInConsentSetterAPIUser
      AppName: TouchpointUpdate
    CODE:
      Schedule: 'rate(365 days)'
      SalesforceStage: CODE
      IdentityStage: CODE
      MpapiStage: CODE
      SalesforceUsername: SoftOptInConsentSetterAPIUser
      AppName: AwsConnectorSandbox
    DEV:
      Schedule: 'rate(365 days)'
      SalesforceStage: DEV
      IdentityStage: CODE
      MpapiStage: CODE
      SalesforceUsername: SoftOptInConsentSetterAPIUser
      AppName: AwsConnectorSandbox

Conditions:
  IsProd: !Equals [ !Ref Stage, PROD ]

Resources:
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Updates Identity Soft Opt-In Consents upon Acquisition and Cancellation of Subscriptions in Salesforce
      FunctionName: !Sub soft-opt-in-consent-setter-${Stage}
      Handler: com.gu.soft_opt_in_consent_setter.Handler::handleRequest
      CodeUri:
        Bucket: support-service-lambdas-dist
        Key: !Sub membership/${Stage}/soft-opt-in-consent-setter/soft-opt-in-consent-setter.jar
      MemorySize: 512
      Runtime: java11
      Timeout: 900
      Environment:
        Variables:
          Stage: !Ref Stage
          sfApiVersion: v46.0
          sfAuthUrl:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/ConnectedApp/${AppName}:SecretString:authUrl}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfClientId:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/ConnectedApp/${AppName}:SecretString:clientId}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfClientSecret:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/ConnectedApp/${AppName}:SecretString:clientSecret}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfPassword:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/User/${SalesforceUsername}:SecretString:sfPassword}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          sfToken:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/User/${SalesforceUsername}:SecretString:sfToken}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          sfUsername:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/User/${SalesforceUsername}:SecretString:sfUsername}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          identityUrl:
            !Sub
            - '{{resolve:secretsmanager:${IdentityStage}/Identity/SoftOptInConsentAPI:SecretString:identityUrl}}'
            - IdentityStage: !FindInMap [ StageMap, !Ref Stage, IdentityStage ]
          identityToken:
            !Sub
            - '{{resolve:secretsmanager:${IdentityStage}/Identity/SoftOptInConsentAPI:SecretString:identityToken}}'
            - IdentityStage: !FindInMap [ StageMap, !Ref Stage, IdentityStage ]
          mpapiUrl:
            !Sub
            - '{{resolve:secretsmanager:${MpapiStage}/MobilePurchasesAPI/User/GetSubscriptions:SecretString:mpapiUrl}}'
            - MpapiStage: !FindInMap [ StageMap, !Ref Stage, MpapiStage ]
          mpapiToken:
            !Sub
            - '{{resolve:secretsmanager:${MpapiStage}/MobilePurchasesAPI/User/GetSubscriptions:SecretString:mpapiToken}}'
            - MpapiStage: !FindInMap [ StageMap, !Ref Stage, MpapiStage ]
      Events:
        ScheduledRun:
          Type: Schedule
          Properties:
            Schedule: !FindInMap [ StageMap, !Ref Stage, Schedule]
            Description: Runs Soft Opt-In Consent Setter
            Enabled: True
      Policies:
        - Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource:
                - !Sub arn:aws:s3:::soft-opt-in-consent-setter/${Stage}/ConsentsByProductMapping.json
        - Statement:
            - Effect: Allow
              Action: cloudwatch:PutMetricData
              Resource: "*"
        - Statement:
            - Sid: readDeployedArtefact
              Effect: Allow
              Action: s3:GetObject
              Resource:
                - arn:aws:s3::*:membership-dist/*

  LambdaFunctionIAP:
    Type: AWS::Serverless::Function
    Properties:
      Description: Updates Identity Soft Opt-In Consents upon Acquisition and Cancellation of Subscriptions based on a queue populated by Salesforce and the Mobile Purchases API
      FunctionName: !Sub soft-opt-in-consent-setter-IAP-${Stage}
      Handler: com.gu.soft_opt_in_consent_setter.HandlerIAP::handleRequest
      CodeUri:
        Bucket: support-service-lambdas-dist
        Key: !Sub membership/${Stage}/soft-opt-in-consent-setter/soft-opt-in-consent-setter.jar
      MemorySize: 512
      Runtime: java11
      Environment:
        Variables:
          Stage: !Ref Stage
          sfApiVersion: v56.0
          sfAuthUrl:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/ConnectedApp/${AppName}:SecretString:authUrl}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfClientId:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/ConnectedApp/${AppName}:SecretString:clientId}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfClientSecret:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/ConnectedApp/${AppName}:SecretString:clientSecret}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfPassword:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/User/${SalesforceUsername}:SecretString:sfPassword}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          sfToken:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/User/${SalesforceUsername}:SecretString:sfToken}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          sfUsername:
            !Sub
            - '{{resolve:secretsmanager:${SalesforceStage}/Salesforce/User/${SalesforceUsername}:SecretString:sfUsername}}'
            - SalesforceStage: !FindInMap [ StageMap, !Ref Stage, SalesforceStage ]
              SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          identityUrl:
            !Sub
            - '{{resolve:secretsmanager:${IdentityStage}/Identity/SoftOptInConsentAPI:SecretString:identityUrl}}'
            - IdentityStage: !FindInMap [ StageMap, !Ref Stage, IdentityStage ]
          identityToken:
            !Sub
            - '{{resolve:secretsmanager:${IdentityStage}/Identity/SoftOptInConsentAPI:SecretString:identityToken}}'
            - IdentityStage: !FindInMap [ StageMap, !Ref Stage, IdentityStage ]
          mpapiUrl:
            !Sub
            - '{{resolve:secretsmanager:${MpapiStage}/MobilePurchasesAPI/User/GetSubscriptions:SecretString:mpapiUrl}}'
            - MpapiStage: !FindInMap [ StageMap, !Ref Stage, MpapiStage ]
          mpapiToken:
            !Sub
            - '{{resolve:secretsmanager:${MpapiStage}/MobilePurchasesAPI/User/GetSubscriptions:SecretString:mpapiToken}}'
            - MpapiStage: !FindInMap [ StageMap, !Ref Stage, MpapiStage ]
      Policies:
        - Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource:
                - !Sub arn:aws:s3:::soft-opt-in-consent-setter/${Stage}/ConsentsByProductMapping.json
        - Statement:
            - Effect: Allow
              Action: cloudwatch:PutMetricData
              Resource: "*"
        - Statement:
            - Sid: readDeployedArtefact
              Effect: Allow
              Action: s3:GetObject
              Resource:
                - arn:aws:s3::*:membership-dist/*
        - Statement:
            Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
            Resource: !GetAtt SoftOptInsQueue.Arn

  SoftOptInsQueueCrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::2013-5905-4765:root"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SoftOptInsQueue.Arn

  SoftOptInsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 3000
      QueueName: !Sub soft-opt-in-consent-setter-queue-${Stage}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SoftOptInsDeadLetterQueue.Arn
        maxReceiveCount: 3

  SoftOptInsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub soft-opt-in-consent-setter-dead-letter-queue-${Stage}

  SQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt SoftOptInsQueue.Arn
      FunctionName: !Ref LambdaFunctionIAP

  failedRunAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    DependsOn:
      - LambdaFunction
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:retention-dev
      AlarmName: !Sub soft-opt-in-consent-setter-${Stage} failed to run
      AlarmDescription: >
        Five or more runs found an error and were unable to complete.
        See https://github.com/guardian/support-service-lambdas/blob/main/handlers/soft-opt-in-consent-setter/README.md#failedRunAlarm
        for possible causes, impacts and fixes.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 3600
      Statistic: Sum
      Threshold: 5
      TreatMissingData: notBreaching

  failedRunAlarmIAP:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:retention-dev
      AlarmName: !Sub soft-opt-in-consent-setter-IAP-${Stage} failed to run
      AlarmDescription: >
        Five or more runs found an error and were unable to complete.
        See https://github.com/guardian/support-service-lambdas/blob/main/handlers/soft-opt-in-consent-setter/README.md#failedRunAlarm
        for possible causes, impacts and fixes.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SoftOptInsDeadLetterQueue.QueueName
      Period: 300
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Threshold: 5
      TreatMissingData: notBreaching

  failedUpdateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    DependsOn:
      - LambdaFunction
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:retention-dev
      AlarmName: !Sub soft-opt-in-consent-setter-${Stage} failed to update Salesforce records
      AlarmDescription: >
        A run failed to update (some) records in Salesforce in the last hour.
        See https://github.com/guardian/support-service-lambdas/blob/main/handlers/soft-opt-in-consent-setter/README.md#failedUpdateAlarm
        for possible causes, impacts and fixes.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Stage
          Value: !Sub ${Stage}
      EvaluationPeriods: 1
      MetricName: failed_salesforce_update
      Namespace: soft-opt-in-consent-setter
      Period: 3600
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
