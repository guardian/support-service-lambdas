AWSTemplateFormatVersion: "2010-09-09"
Description: Polls GoCardless for direct debit mandate events and pushes into SalesForce

Parameters:
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
    - PROD
    - CODE
    Default: CODE
  LogGroupNamePrefix:
    Description: The full log group name (-${Stage} will be appended)
    Type: String
    Default: "/aws/lambda/sf-gocardless-sync"

Conditions:
  CreateProdMonitoring: !Equals [ !Ref Stage, PROD ]

Resources:

  GoCardlessSalesForceSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${LogGroupNamePrefix}-${Stage}"
      RetentionInDays: 14

  GoCardlessSalesForceSyncRole:
    Type: AWS::IAM::Role
    DependsOn: GoCardlessSalesForceSyncLogGroup
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - lambda:InvokeFunction
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupNamePrefix}-${Stage}:log-stream:*"
      - PolicyName: ReadPrivateCredentials
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
            - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/goCardless-${Stage}.*.json
            - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/sfAuth-${Stage}.*.json


  GoCardlessSalesForceSyncLambda:
    Type: AWS::Lambda::Function
    DependsOn:
    - GoCardlessSalesForceSyncRole
    - GoCardlessSalesForceSyncLogGroup
    Properties:
      Description: Polls GoCardless for direct debit mandate events and pushes into SalesForce
      FunctionName:
        !Sub sf-gocardless-sync-${Stage}
      Code:
        S3Bucket: support-service-lambdas-dist
        S3Key: !Sub membership/${Stage}/sf-gocardless-sync/sf-gocardless-sync.jar
      Handler: com.gu.sf_gocardless_sync.Handler::apply
      Environment:
        Variables:
          Stage: !Ref Stage
      Role:
        Fn::GetAtt:
        - "GoCardlessSalesForceSyncRole"
        - Arn
      MemorySize: 1536 # TODO review this amount of memory is required
      Runtime: java8
      Timeout: 240 # kills if still running after 4mins to avoid clashes with next run


  GoCardlessSalesForceSyncScheduleRule:
    Type: AWS::Events::Rule
    DependsOn:
    - GoCardlessSalesForceSyncLambda
    - GoCardlessSalesForceSyncLogGroup
    Properties:
      Description: "Trigger the GoCardlessSalesForceSync every 5 mins"
      ScheduleExpression: "rate(5 minutes)" # TODO consider more sophisticated cron schedule (to reduce api calls)
      State: "ENABLED"
      Targets:
      -
        Id: !Sub 'trigger_GoCardlessSalesForceSync-${Stage}'
        Arn:
          Fn::GetAtt:
          - "GoCardlessSalesForceSyncLambda"
          - Arn

  InvokeGoCardlessSalesForceSyncLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GoCardlessSalesForceSyncLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [GoCardlessSalesForceSyncScheduleRule, Arn]

  GenericErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn: GoCardlessSalesForceSyncLogGroup
    Properties:
      FilterPattern: "HTTP request was unsuccessful"
      LogGroupName: !Sub "${LogGroupNamePrefix}-${Stage}"
      MetricTransformations:
      -
        MetricValue: "1"
        MetricNamespace: "GoCardlessSalesForceSync"
        MetricName: "GenericError Count"

  GenericErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - GenericErrorMetricFilter
    - GoCardlessSalesForceSyncLogGroup
    Condition: CreateProdMonitoring
    Properties:
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:fulfilment-dev
      AlarmName: !Sub "URGENT 9-5 - ${Stage} ${LogGroupNamePrefix} - sustained errors observed"
      AlarmDescription: "IMPACT: If this goes unaddressed CSRs won't be able to see Direct Debit Mandate failures AND no email comms will go out to customers. Follow the process in https://docs.google.com/document/d/1_3El3cly9d7u_jPgTcRjLxmdG2e919zCLvmcFCLOYAk/edit"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: "GenericError Count"
      Namespace: "GoCardlessSalesForceSync"
      Period: 7200
      Statistic: Sum
      Threshold: 20 # currently runs every five mins (so 24 runs every two hours)
      TreatMissingData: notBreaching

# TODO add metric events processed filter and mandate records created filter (with alarm if this drops below certain threshold per 12 hours)

# TODO add 'StoppedRunning' alarm based on existing Invocations metric

# TODO add a 'SocketTimeoutException' alarm if occurs more than 3 times in a row

