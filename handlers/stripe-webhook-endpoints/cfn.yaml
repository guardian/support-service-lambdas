AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Endpoints to handle stripe webhooks

Parameters:
  App:
    Description: Endpoints to handle stripe webhooks
    Type: String
    Default: stripe-webhook-endpoints
  Stack:
    Description: Stack name
    Type: String
    Default: membership
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
      - CODE
      - PROD
  DeployBucket:
    Description: Bucket to copy files to
    Type: String
    Default: membership-dist

Resources:
  ApiGateway: #to have API created in AWS Console
    Type: AWS::Serverless::Api
    Properties:
      StageName: IsProd
      Description: Gateway for Stripe to make POST requests to
      Name: !Sub stripe-webhook-endpoints-${Stage}
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref Stack
          description: API Gateway to handle Stripe events
        x-amazon-apigateway-request-validators:
          body-only:
            validateRequestBody: true
            validateRequestParameters: false
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
        x-amazon-apigateway-request-validator: body-only
        securityDefinitions:
          authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: oauth2
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri: !Join [ "", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/", !GetAtt StripeAuthorizer.Arn, "/invocations" ] ]
              authorizerCredentials: !GetAtt ApiGatewayToSQSRole.Arn
              identityValidationExpression: "Bearer [A-Za-z0-9_-]+.[A-Za-z0-9_-]+.[A-Za-z0-9_-]+"
              authorizerResultTtlInSeconds: 300
        paths:
          "/":
            post:
              summary: receive a new stripe request
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
                - authorizer: [ ]
              parameters:
                - in: body
                  name: MailSendBody
                  required: true
                  schema:
                    $ref: "#/definitions/MailSendBody"
              x-amazon-apigateway-request-validator: body-only
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayToSQSRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: !Sub "Action=SendMessage##\n&QueueUrl=$util.urlEncode('${ApiQueue}')##\n\
                    &MessageBody=$util.urlEncode($input.body)##\n"
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws"
        definitions:
          Empty:
            type: object
            title: Empty
          MailSendBody:
            title: MailSendBody
            type: object
            properties:
              template:
                type: string
              locale:
                type: string
              userName:
                type: string
              userEmail:
                type: string
            required:
              - template
              - locale
              - userName
              - userEmail

  # authorization lambda
  StripeAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${App}-authorization-${Stage}
      Description: Authorize API Gateway requests
      Handler: com.gu.paymentIntentIssues.Lambda::handler
      Runtime: java11

  ApiGatewayToSQSRole: #to allow API Gateway to push message to SQS
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      RoleName: !Sub "stripe-webhook-endpoints-apigateway-to-sqs"
      Policies:
        - PolicyName: ApiQueuePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:SetQueueAttributes
                Resource: !GetAtt StripePaymentFailureMessagesQueue.Arn
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt StripeAuthorizer.Arn

  PaymentIntentIssuesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub stripe-payment-intent-issues-${Stage}
      Description: A lambda for handling payment intent issues (cancellation, failure, action required)
      Runtime: java11
      Handler: com.gu.paymentIntentIssues.Lambda::handler
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          App: payment-intent-issues
          Stack: !Ref Stack
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/membership/payment-intent-issues
        - Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource:
                - arn:aws:s3::*:membership-dist/*
        - AWSLambdaSQSQueueExecutionRole # This policy is required to allow the lambda to read from the queue
        - Statement:
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt StripePaymentFailureMessagesQueue.Arn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt StripePaymentFailureMessagesQueue.Arn
            BatchSize: 10
            Enabled: false

  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: The ARN of the queue
      FunctionName: !Sub stripe-payment-intent-issues-${Stage}
      FunctionResponseTypes: [ReportBatchItemFailures]

  StripePaymentFailureMessagesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub stripe-payment-failure-messages-queue-${Stage}
      VisibilityTimeout: 1800
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt StripePaymentFailureMessagesDLQ.Arn
        maxReceiveCount: 10

  StripePaymentFailureMessagesDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub stripe-payment-failure-messages-queue-${Stage}

  CustomerUpdatedLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub stripe-customer-updated-${Stage}
      Description: A lambda for handling customer updates
      Runtime: java11
      Handler: com.gu.stripeCardUpdated.Lambda::apply
      MemorySize: 1536
      Timeout: 900
      Environment:
        Variables:
          App: stripe-customer-updated
          Stack: !Ref Stack
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/membership/payment-intent-issues
        - Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource:
                - arn:aws:s3::*:membership-dist/*
                - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/zuoraRest-${Stage}.*.json
                - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/trustedApi-${Stage}.*.json
                - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/stripe-${Stage}.*.json
      Events:
        AcquisitionEvent:
          Type: Api
          Properties:
            Path: '/customer-updated'
            Method: post
            RequestParameters:
              - method.request.querystring.apiToken
