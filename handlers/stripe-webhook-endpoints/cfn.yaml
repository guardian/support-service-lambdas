AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Endpoints to handle stripe webhooks

Parameters:
  App:
    Description: Endpoints to handle stripe webhooks
    Type: String
    Default: stripe-webhook-endpoints
  Stack:
    Description: Stack name
    Type: String
    Default: membership
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
      - CODE
      - PROD
  DeployBucket:
    Description: Bucket to copy files to
    Type: String
    Default: membership-dist

Conditions:
  IsProd: !Equals [ !Ref Stage, "PROD" ]

Resources:
  ##########################################################################
  #   API Gateway                                                    #
  ##########################################################################

  APIGateway:  #to have API created in AWS Console
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: Gateway for Stripe to make POST requests to
      Name: !Sub stripe-webhook-endpoints-${Stage}

  ApiGatewayToSQSRole :
    Type: AWS::IAM::Role  #to allow API Gateway to push message to SQS
    Properties:
      Path: /payment-intent-issue
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/stripe-webhook-endpoints-to-SQS-Policy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Sub "stripe-webhook-endpoints-apigateway-to-sqs"
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - sqs:SendMessage
                  - sqs:SetQueueAttributes
                Effect: Allow
                Resource: !GetAtt 'StripePaymentFailureMessagesQueue.Arn'

  StripePaymentFailureMessagesQueuePolicy:  #on the SQS side, need to have policy defined to receive message from API
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref StripePaymentFailureMessagesQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: order-api-send-msg-sqs
            Effect: Allow
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Resource: !GetAtt 'StripePaymentFailureMessagesQueue.Arn'

  PostMethod:
    Type: AWS::ApiGateway::Method #to configure the API to refer to SQS Policy and wire the Rest Call to SQS
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Credentials: !GetAtt 'ApiGatewayToSQSRole.Arn'
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        RequestTemplates:
          application/json: Action=SendMessage&MessageBody=$util.urlEncode($input.body)
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :sqs:path/payment-intent-issue/
            - !Ref 'AWS::AccountId'
            - /
            - !Sub ${StripePaymentFailureMessagesQueue.QueueName}
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: '200'
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Stage

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Stage
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref Deployment

  ##########################################################################
  #    PaymentIntentIssuesLambda
  ##########################################################################

  PaymentIntentIssuesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub stripe-payment-intent-issues-${Stage}
      Description: A lambda for handling payment intent issues (cancellation, failure, action required)
      Runtime: java11
      Handler: com.gu.paymentIntentIssues.Lambda::handler
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          App: payment-intent-issues
          Stack: !Ref Stack
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
            - ssm:GetParametersByPath
          Resource:
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/membership/payment-intent-issues
      - Statement:
        - Effect: Allow
          Action: s3:GetObject
          Resource:
            - arn:aws:s3::*:membership-dist/*
      - AWSLambdaSQSQueueExecutionRole # This policy is required to allow the lambda to read from the queue
      - Statement:
          Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - !GetAtt StripePaymentFailureMessagesQueue.Arn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt StripePaymentFailureMessagesQueue.Arn
            BatchSize: 10
            Enabled: false

  Type: AWS::Lambda::EventSourceMapping
  Properties:
    BatchSize: 10
    Enabled: True
    EventSourceArn: The ARN of the queue
    FunctionName: !Sub stripe-payment-intent-issues-${Stage}
    FunctionResponseTypes: ReportBatchItemFailures

  StripePaymentFailureMessagesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: stripe-payment-failure-messages-queue-${Stage}
      VisibilityTimeout: 1800

  ##########################################################################
  #  CustomerUpdatedLambda
  ##########################################################################

  CustomerUpdatedLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub stripe-customer-updated-${Stage}
      Description: A lambda for handling customer updates
      Runtime: java11
      Handler: com.gu.stripeCardUpdated.Lambda::apply
      MemorySize: 1536
      Timeout: 900
      Environment:
        Variables:
          App: stripe-customer-updated
          Stack: !Ref Stack
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/membership/payment-intent-issues
        - Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource:
                - arn:aws:s3::*:membership-dist/*
                - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/zuoraRest-${Stage}.*.json
                - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/trustedApi-${Stage}.*.json
                - !Sub arn:aws:s3:::gu-reader-revenue-private/membership/support-service-lambdas/${Stage}/stripe-${Stage}.*.json
      Events:
        AcquisitionEvent:
          Type: Api
          Properties:
            Path: '/customer-updated'
            Method: post
            RequestParameters:
              - method.request.querystring.apiToken
