Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - PROD
      - DEV
    Default: DEV
  StackName:
    Type: String
    Default: sf-emails-to-s3-exporter

Mappings:
  StageMap:
    PROD:
      SalesforceUsername: EmailsToS3APIUser
      AppName: SFEmailsToS3
    DEV:
      SalesforceUsername: EmailsToS3APIUser
      AppName: AwsConnectorSandbox

Conditions:
  IsProd: !Equals [ !Ref Stage, PROD ]

Resources:
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub ${StackName}-${Stage}-api-gateway
      ApiKeySourceType: "HEADER"
      EndpointConfiguration:
        Types:
          - "EDGE"

    ApiGatewayResource:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        PathPart: "{bucketName}"
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayResource2:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        PathPart: "{caseNumber}"
        ParentId: !Ref ApiGatewayResource

    ApiGatewayMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResourceId: !Ref ApiGatewayResource2
        HttpMethod: "GET"
        AuthorizationType: "NONE"
        ApiKeyRequired: true
        RequestParameters:
          "method.request.path.bucketName": true
          "method.request.path.caseNumber": true
        MethodResponses:
          - ResponseParameters:
              "method.response.header.Content-Length": false
              "method.response.header.Content-Type": false
              "method.response.header.Timestamp": false
            StatusCode: "200"
          - ResponseParameters:
              "method.response.header.Content-Length": false
              "method.response.header.Content-Type": false
              "method.response.header.Timestamp": false
            StatusCode: "400"
          - ResponseParameters:
              "method.response.header.Content-Length": false
              "method.response.header.Content-Type": false
              "method.response.header.Timestamp": false
            StatusCode: "500"
        Integration:
          CacheNamespace: !Ref ApiGatewayResource2
          Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/APIGatewayS3ReadWrite"
          IntegrationHttpMethod: "GET"
          IntegrationResponses:
            - ResponseParameters:
                "method.response.header.Content-Length": "integration.response.header.Content-Length"
                "method.response.header.Content-Type": "integration.response.header.Content-Type"
                "method.response.header.Timestamp": "integration.response.header.Date"
              ResponseTemplates: { }
              SelectionPattern: "2\\d{2}"
              StatusCode: "200"
            - SelectionPattern: "4\\d{2}"
              StatusCode: "400"
            - SelectionPattern: "5\\d{2}"
              StatusCode: "500"
          PassthroughBehavior: "WHEN_NO_MATCH"
          RequestParameters:
            "integration.request.path.folder": "method.request.path.bucketName"
            "integration.request.path.item": "method.request.path.caseNumber"
          TimeoutInMillis: 29000
          Type: "AWS"
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/{folder}/{item}"

      ApiGatewayApiKey:
        Type: "AWS::ApiGateway::ApiKey"
        Properties:
          Enabled: true
          Name: !Sub "sf-emails-to-s3-exporter-${Stage}-api-key"

      ApiGatewayUsagePlan:
        Type: "AWS::ApiGateway::UsagePlan"
        Properties:
          UsagePlanName: !Sub "sf-emails-to-s3-exporter-${Stage}-usage-plan"
          ApiStages:
            - ApiId: !Ref ApiGatewayRestApi
              Stage: !Ref Stage

      ApiGatewayUsagePlanKey:
        Type: "AWS::ApiGateway::UsagePlanKey"
        Properties:
          KeyId: !GetAtt ApiGatewayApiKey.APIKeyId
          KeyType: "API_KEY"
          UsagePlanId: "WwFavQs8QN7ktHxrxuTb29S43VMQMX6V7mF6kr2G"

      ApiGatewayStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
          StageName: "DEV"
          DeploymentId: "awso7c"
          RestApiId: "tgmly5oxz7"
          CacheClusterEnabled: false
          MethodSettings:
            - CacheDataEncrypted: false
              CacheTtlInSeconds: 300
              CachingEnabled: false
              DataTraceEnabled: true
              HttpMethod: "*"
              LoggingLevel: "INFO"
              MetricsEnabled: false
              ResourcePath: "/*"
              ThrottlingBurstLimit: 5000
              ThrottlingRateLimit: 10000
          TracingEnabled: false
          Tags:
            - Key: "App"
              Value: "sf-emails-to-s3-exporter"
            - Key: "Stack"
              Value: "membership"
            - Key: "Stage"
              Value: "DEV"

      ApiGatewayMethod2:
        Type: "AWS::ApiGateway::Method"
        Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !Ref ApiGatewayResource2
          HttpMethod: "DELETE"
          AuthorizationType: "NONE"
          ApiKeyRequired: true
          RequestParameters:
            "method.request.path.bucketName": true
            "method.request.path.caseNumber": true
          MethodResponses:
            - ResponseParameters:
                "method.response.header.Content-Length": false
                "method.response.header.Content-Type": false
                "method.response.header.Timestamp": false
              StatusCode: "200"
            - ResponseParameters:
                "method.response.header.Content-Length": false
                "method.response.header.Content-Type": false
                "method.response.header.Timestamp": false
              StatusCode: "400"
            - ResponseParameters:
                "method.response.header.Content-Length": false
                "method.response.header.Content-Type": false
                "method.response.header.Timestamp": false
              StatusCode: "500"
          Integration:
            CacheNamespace: !Ref ApiGatewayResource2
            Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/APIGatewayS3ReadWrite"
            IntegrationHttpMethod: "DELETE"
            IntegrationResponses:
              - ResponseParameters:
                  "method.response.header.Content-Length": "integration.response.header.Content-Length"
                  "method.response.header.Content-Type": "integration.response.header.Content-Type"
                  "method.response.header.Timestamp": "integration.response.header.Date"
                ResponseTemplates: { }
                SelectionPattern: "2\\d{2}"
                StatusCode: "200"
              - SelectionPattern: "4\\d{2}"
                StatusCode: "400"
              - SelectionPattern: "5\\d{2}"
                StatusCode: "500"
            PassthroughBehavior: "WHEN_NO_MATCH"
            RequestParameters:
              "integration.request.path.folder": "method.request.path.bucketName"
              "integration.request.path.item": "method.request.path.caseNumber"
            TimeoutInMillis: 29000
            Type: "AWS"
            Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/{folder}/{item}"

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieves emails from Salesforce and saves as Json to S3
      FunctionName: !Sub sf-emails-to-s3-exporter-${Stage}
      Handler: com.gu.sf_emails_to_s3_exporter.Handler::handleRequest
      CodeUri:
        Bucket: support-service-lambdas-dist
        Key: !Sub membership/${Stage}/sf-emails-to-s3-exporter/sf-emails-to-s3-exporter.jar
      MemorySize: 512
      Runtime: java8.al2
      Timeout: 900
      Environment:
        Variables:
          Stage: !Ref Stage
          bucketName: !Sub emails-from-sf-${Stage}
          sfApiVersion: v50.0
          sfAuthUrl:
            !Sub
            - '{{resolve:secretsmanager:${Stage}/Salesforce/ConnectedApp/${AppName}:SecretString:authUrl}}'
            - AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfClientId:
            !Sub
            - '{{resolve:secretsmanager:${Stage}/Salesforce/ConnectedApp/${AppName}:SecretString:clientId}}'
            - AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfClientSecret:
            !Sub
            - '{{resolve:secretsmanager:${Stage}/Salesforce/ConnectedApp/${AppName}:SecretString:clientSecret}}'
            - AppName: !FindInMap [ StageMap, !Ref Stage, AppName ]
          sfPassword:
            !Sub
            - '{{resolve:secretsmanager:${Stage}/Salesforce/User/${SalesforceUsername}:SecretString:sfPassword}}'
            - SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          sfToken:
            !Sub
            - '{{resolve:secretsmanager:${Stage}/Salesforce/User/${SalesforceUsername}:SecretString:sfToken}}'
            - SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
          sfUsername:
            !Sub
            - '{{resolve:secretsmanager:${Stage}/Salesforce/User/${SalesforceUsername}:SecretString:sfUsername}}'
            - SalesforceUsername: !FindInMap [ StageMap, !Ref Stage, SalesforceUsername ]
      Policies:
        - Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource:
                - !Sub arn:aws:s3:::emails-from-sf-${Stage}/*
        - Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::emails-from-sf-${Stage}/*
        - Statement:
            - Effect: Allow
              Action: s3:ListBucket
              Resource:
                - !Sub arn:aws:s3:::emails-from-sf-${Stage}/*
        - Statement:
            - Sid: readDeployedArtefact
              Effect: Allow
              Action: s3:GetObject
              Resource:
                - arn:aws:s3::*:membership-dist/*
