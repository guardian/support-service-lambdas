import type { GuStackProps } from '@guardian/cdk/lib/constructs/core';
import { GuStack } from '@guardian/cdk/lib/constructs/core';
import { GuLambdaFunction } from '@guardian/cdk/lib/constructs/lambda';
import type { App } from 'aws-cdk-lib';
import { Duration } from 'aws-cdk-lib';
import {
	Effect,
	PolicyStatement,
	Role,
	ServicePrincipal,
} from 'aws-cdk-lib/aws-iam';
import { Architecture, LoggingFormat } from 'aws-cdk-lib/aws-lambda';
// import { Bucket } from 'aws-cdk-lib/aws-s3';
import {
	Choice,
	Condition,
	DefinitionBody,
	JsonPath,
	Map,
	Pass,
	StateMachine,
} from 'aws-cdk-lib/aws-stepfunctions';
import { LambdaInvoke } from 'aws-cdk-lib/aws-stepfunctions-tasks';
import { nodeVersion } from './node-version';

export class NegativeInvoicesProcessor extends GuStack {
	constructor(scope: App, id: string, props: GuStackProps) {
		super(scope, id, props);

		const appName = 'negative-invoices-processor';

		const role = new Role(this, 'query-lambda-role', {
			// Set the name of the role rather than using an autogenerated name.
			// This is because if the ARN is too long then it breaks the authentication request to GCP
			roleName: `neg-inv-processor-${this.stage}`,
			assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
		});
		role.addToPolicy(
			new PolicyStatement({
				actions: ['ssm:GetParameter'],
				resources: [
					`arn:aws:ssm:${this.region}:${this.account}:parameter/negative-invoices-processor/${this.stage}/gcp-credentials-config`,
				],
			}),
		);
		role.addToPolicy(
			new PolicyStatement({
				actions: [
					'logs:CreateLogGroup',
					'logs:CreateLogStream',
					'logs:PutLogEvents',
				],
				resources: ['*'],
			}),
		);

		const allowPutMetric = new PolicyStatement({
			effect: Effect.ALLOW,
			actions: ['cloudwatch:PutMetricData'],
			resources: ['*'],
		});

		// new Bucket(this, 'Bucket', {
		// 	bucketName: `${appName}-${this.stage.toLowerCase()}`,
		// });

		const getInvoicesLambda = new GuLambdaFunction(
			this,
			'get-invoices-lambda',
			{
				app: appName,
				functionName: `${appName}-get-invoices-${this.stage}`,
				loggingFormat: LoggingFormat.TEXT,
				runtime: nodeVersion,
				environment: {
					Stage: this.stage,
				},
				handler: 'getInvoices.handler',
				fileName: `${appName}.zip`,
				architecture: Architecture.ARM_64,
				initialPolicy: [allowPutMetric],
				timeout: Duration.seconds(300),
				role,
			},
		);

		const checkForActiveSubLambda = new GuLambdaFunction(
			this,
			'check-for-active-sub-lambda',
			{
				app: appName,
				functionName: `${appName}-check-for-active-sub-${this.stage}`,
				loggingFormat: LoggingFormat.TEXT,
				runtime: nodeVersion,
				environment: {
					Stage: this.stage,
				},
				handler: 'checkForActiveSub.handler',
				fileName: `${appName}.zip`,
				architecture: Architecture.ARM_64,
				initialPolicy: [
					new PolicyStatement({
						actions: ['secretsmanager:GetSecretValue'],
						resources: [
							`arn:aws:secretsmanager:${this.region}:${this.account}:secret:${this.stage}/Zuora-OAuth/SupportServiceLambdas-*`,
						],
					}),
				],
			},
		);

		const checkForActivePaymentMethodLambda = new GuLambdaFunction(
			this,
			'check-for-active-payment-method-lambda',
			{
				app: appName,
				functionName: `${appName}-check-for-active-payment-method-${this.stage}`,
				loggingFormat: LoggingFormat.TEXT,
				runtime: nodeVersion,
				environment: {
					Stage: this.stage,
				},
				handler: 'checkForActivePaymentMethod.handler',
				fileName: `${appName}.zip`,
				architecture: Architecture.ARM_64,
				initialPolicy: [
					new PolicyStatement({
						actions: ['secretsmanager:GetSecretValue'],
						resources: [
							`arn:aws:secretsmanager:${this.region}:${this.account}:secret:${this.stage}/Zuora-OAuth/SupportServiceLambdas-*`,
						],
					}),
				],
			},
		);

		const applyCreditToAccountBalanceLambda = new GuLambdaFunction(
			this,
			'apply-credit-to-account-balance-lambda',
			{
				app: appName,
				functionName: `${appName}-apply-credit-to-account-balance-${this.stage}`,
				loggingFormat: LoggingFormat.TEXT,
				runtime: nodeVersion,
				environment: {
					Stage: this.stage,
				},
				handler: 'applyCreditToAccountBalance.handler',
				fileName: `${appName}.zip`,
				architecture: Architecture.ARM_64,
				initialPolicy: [
					new PolicyStatement({
						actions: ['secretsmanager:GetSecretValue'],
						resources: [
							`arn:aws:secretsmanager:${this.region}:${this.account}:secret:${this.stage}/Zuora-OAuth/SupportServiceLambdas-*`,
						],
					}),
				],
			},
		);

		const getInvoicesLambdaTask = new LambdaInvoke(this, 'Get invoices', {
			lambdaFunction: getInvoicesLambda,
			outputPath: '$.Payload',
		}).addRetry({
			errors: ['States.ALL'],
			interval: Duration.seconds(10),
			maxAttempts: 2, // Retry only once (1 initial attempt + 1 retry)
		});

		const checkForActiveSubLambdaTask = new LambdaInvoke(
			this,
			'Check for Active Sub',
			{
				lambdaFunction: checkForActiveSubLambda,
				outputPath: '$.Payload',
			},
		).addRetry({
			errors: ['States.ALL'],
			interval: Duration.seconds(10),
			maxAttempts: 2, // Retry only once (1 initial attempt + 1 retry)
		});

		const checkForActivePaymentMethodLambdaTask = new LambdaInvoke(
			this,
			'Check for Active Payment Method',
			{
				lambdaFunction: checkForActivePaymentMethodLambda,
				outputPath: '$.Payload',
			},
		).addRetry({
			errors: ['States.ALL'],
			interval: Duration.seconds(10),
			maxAttempts: 2, // Retry only once (1 initial attempt + 1 retry)
		});

		const applyCreditToAccountBalanceLambdaTask = new LambdaInvoke(
			this,
			'Apply credit to account balance',
			{
				lambdaFunction: applyCreditToAccountBalanceLambda,
				outputPath: '$.Payload',
			},
		).addRetry({
			errors: ['States.ALL'],
			interval: Duration.seconds(10),
			maxAttempts: 2, // Retry only once (1 initial attempt + 1 retry)
		});

		const invoiceProcessorMap = new Map(this, 'Invoice processor map', {
			maxConcurrency: 1,
			itemsPath: JsonPath.stringAt('$.invoices'),
			resultPath: '$.processedInvoices',
		});

		const hasActivePaymentMethodChoice = new Choice(
			this,
			'Has active payment method?',
		)
			.when(
				Condition.booleanEquals('$.hasActivePaymentMethod', true),
				new Pass(this, 'do refund lambda will go here'),
			)
			.otherwise(new Pass(this, 'check for valid email lambda will go here'));

		const hasActiveSubChoice = new Choice(this, 'Has active sub?')
			.when(
				Condition.booleanEquals('$.hasActiveSub', false),
				checkForActivePaymentMethodLambdaTask.next(
					hasActivePaymentMethodChoice,
				),
			)
			.otherwise(new Pass(this, 'End'));

		invoiceProcessorMap.iterator(
			applyCreditToAccountBalanceLambdaTask
				.next(checkForActiveSubLambdaTask)
				.next(hasActiveSubChoice),
		);

		const definitionBody = DefinitionBody.fromChainable(
			getInvoicesLambdaTask.next(invoiceProcessorMap),
		);

		new StateMachine(this, `${appName}-state-machine-${this.stage}`, {
			stateMachineName: `${appName}-${this.stage}`,
			definitionBody: definitionBody,
		});
	}
}
