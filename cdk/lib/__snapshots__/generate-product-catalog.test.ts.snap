// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The generate product catalog stack matches the snapshot 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuDistributionBucketParameter",
    ],
    "gu:cdk:version": "TEST",
  },
  "Parameters": {
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    notification_configuration = props["NotificationConfiguration"]
    managed = props.get('Managed', 'true').lower() == 'true'
    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
    stack_id = event['StackId']
    old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
    if managed:
      config = handle_managed(event["RequestType"], notification_configuration)
    else:
      config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
    s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
  def get_id(n):
    n['Id'] = ''
    sorted_notifications = sort_filter_rules(n)
    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
    return f"{stack_id}-{hash(strToHash)}"
  def with_id(n):
    n['Id'] = get_id(n)
    return n

  external_notifications = {}
  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
  for t in CONFIGURATION_TYPES:
    if request_type == 'Update':
        old_incoming_ids = [get_id(n) for n in old.get(t, [])]
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
    elif request_type == 'Delete':
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
    elif request_type == 'Create':
        external_notifications[t] = [n for n in existing_notifications.get(t, [])]
  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  if request_type == 'Delete':
    return external_notifications

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))

def sort_filter_rules(json_obj):
  if not isinstance(json_obj, dict):
      return json_obj
  for key, value in json_obj.items():
      if isinstance(value, dict):
          json_obj[key] = sort_filter_rules(value)
      elif isinstance(value, list):
          json_obj[key] = [sort_filter_rules(item) for item in value]
  if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
      filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
      sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
      json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
  return json_obj",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "CODE",
          },
        ],
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "CODE",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "s3:GetBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "FailedProductCatalogLambdaAlarm543E56AB": {
      "Properties": {
        "ActionsEnabled": false,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":alarms-handler-topic-CODE",
              ],
            ],
          },
        ],
        "AlarmDescription": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "generateproductcataloglambda1E6192C7",
              },
              " failed. Search the logs below for "error" for more information. Impact: This means the product catalog may not be up to date in S3. This lambda runs on a regular schedule so action will only be necessary if the alarm is triggered continuously",
            ],
          ],
        },
        "AlarmName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "generateproductcataloglambda1E6192C7",
              },
              " Lambda has failed",
            ],
          ],
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "generateproductcataloglambda1E6192C7",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "DiagnosticLinks",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "lambda:",
                  {
                    "Ref": "generateproductcataloglambda1E6192C7",
                  },
                ],
              ],
            },
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "CODE",
          },
        ],
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "NS1DNSentry": {
      "Properties": {
        "Name": "product-catalog.code.dev-guardianapis.com",
        "RecordType": "CNAME",
        "ResourceRecords": [
          "dualstack.guardian.map.fastly.net",
        ],
        "Stage": "CODE",
        "TTL": 3600,
      },
      "Type": "Guardian::DNS::RecordSet",
    },
    "PutMetricPolicy702DBD41": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "support-service-lambdas",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PutMetricPolicy702DBD41",
        "Roles": [
          {
            "Ref": "generateproductcataloglambdaServiceRole5FF40E84",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "S3inlinepolicy3B07399A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3::*:membership-dist/support/CODE/generate-product-catalog/",
                "arn:aws:s3::*:gu-zuora-catalog/PROD/Zuora-CODE/*",
              ],
            },
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::gu-product-catalog/CODE/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "S3inlinepolicy3B07399A",
        "Roles": [
          {
            "Ref": "generateproductcataloglambdaServiceRole5FF40E84",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "failedSchemaValidationAlarm": {
      "Properties": {
        "ActionsEnabled": false,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":alarms-handler-topic-CODE",
              ],
            ],
          },
        ],
        "AlarmDescription": "A run of the generate-product-catalog lambda generated a version of the product catalog which failed to validate against the current schema.
This version was not written to S3 to stop it causing errors with production applications, but this means that the catalog is out of date in some way.
Check the logs at https://eu-west-1.console.aws.amazon.com/cloudwatch/home?region=eu-west-1#logsV2:log-groups/log-group/$252Faws$252Flambda$252Fgenerate-product-catalog-CODE to find the cause",
        "AlarmName": "The generate-product-catalog-CODE lambda generated a catalog which cannot be parsed by the current schema",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "Stage",
            "Value": "CODE",
          },
          {
            "Name": "App",
            "Value": "generate-product-catalog",
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "failed-schema-validation",
        "Namespace": "support-service-lambdas",
        "Period": 60,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "CODE",
          },
        ],
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "generateproductcataloglambda1E6192C7": {
      "DependsOn": [
        "generateproductcataloglambdaServiceRoleDefaultPolicy68C46CDA",
        "generateproductcataloglambdaServiceRole5FF40E84",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "support/CODE/generate-product-catalog/generate-product-catalog.zip",
        },
        "Description": "A lambda to generate the Guardian product catalog from the Zuora catalog",
        "Environment": {
          "Variables": {
            "APP": "generate-product-catalog",
            "NODE_OPTIONS": "--enable-source-maps",
            "STACK": "support",
            "STAGE": "CODE",
          },
        },
        "FunctionName": "generate-product-catalog-CODE",
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogFormat": "Text",
        },
        "MemorySize": 1232,
        "Role": {
          "Fn::GetAtt": [
            "generateproductcataloglambdaServiceRole5FF40E84",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "CODE",
          },
        ],
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "generateproductcataloglambdaServiceRole5FF40E84": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "CODE",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "generateproductcataloglambdaServiceRoleDefaultPolicy68C46CDA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/support/CODE/generate-product-catalog/generate-product-catalog.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/CODE/support/generate-product-catalog",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/CODE/support/generate-product-catalog/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "generateproductcataloglambdaServiceRoleDefaultPolicy68C46CDA",
        "Roles": [
          {
            "Ref": "generateproductcataloglambdaServiceRole5FF40E84",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "guzuoracatalogAllowBucketNotificationsTogenerateproductcatalogCODEgenerateproductcataloglambda2EDA50AEF752DADC": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "generateproductcataloglambda1E6192C7",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":s3:::gu-zuora-catalog",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "guzuoracatalogNotifications2A4398B4": {
      "DependsOn": [
        "guzuoracatalogAllowBucketNotificationsTogenerateproductcatalogCODEgenerateproductcataloglambda2EDA50AEF752DADC",
      ],
      "Properties": {
        "BucketName": "gu-zuora-catalog",
        "Managed": false,
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*",
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "prefix",
                      "Value": "PROD/Zuora-CODE",
                    },
                  ],
                },
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "generateproductcataloglambda1E6192C7",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
        "SkipDestinationValidation": false,
      },
      "Type": "Custom::S3BucketNotifications",
    },
  },
}
`;

exports[`The generate product catalog stack matches the snapshot 2`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuDistributionBucketParameter",
    ],
    "gu:cdk:version": "TEST",
  },
  "Parameters": {
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    notification_configuration = props["NotificationConfiguration"]
    managed = props.get('Managed', 'true').lower() == 'true'
    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
    stack_id = event['StackId']
    old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
    if managed:
      config = handle_managed(event["RequestType"], notification_configuration)
    else:
      config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
    s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
  def get_id(n):
    n['Id'] = ''
    sorted_notifications = sort_filter_rules(n)
    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
    return f"{stack_id}-{hash(strToHash)}"
  def with_id(n):
    n['Id'] = get_id(n)
    return n

  external_notifications = {}
  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
  for t in CONFIGURATION_TYPES:
    if request_type == 'Update':
        old_incoming_ids = [get_id(n) for n in old.get(t, [])]
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
    elif request_type == 'Delete':
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
    elif request_type == 'Create':
        external_notifications[t] = [n for n in existing_notifications.get(t, [])]
  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  if request_type == 'Delete':
    return external_notifications

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))

def sort_filter_rules(json_obj):
  if not isinstance(json_obj, dict):
      return json_obj
  for key, value in json_obj.items():
      if isinstance(value, dict):
          json_obj[key] = sort_filter_rules(value)
      elif isinstance(value, list):
          json_obj[key] = [sort_filter_rules(item) for item in value]
  if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
      filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
      sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
      json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
  return json_obj",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "s3:GetBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "FailedProductCatalogLambdaAlarm543E56AB": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":alarms-handler-topic-PROD",
              ],
            ],
          },
        ],
        "AlarmDescription": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "generateproductcataloglambda1E6192C7",
              },
              " failed. Search the logs below for "error" for more information. Impact: This means the product catalog may not be up to date in S3. This lambda runs on a regular schedule so action will only be necessary if the alarm is triggered continuously",
            ],
          ],
        },
        "AlarmName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "generateproductcataloglambda1E6192C7",
              },
              " Lambda has failed",
            ],
          ],
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "generateproductcataloglambda1E6192C7",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "DiagnosticLinks",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "lambda:",
                  {
                    "Ref": "generateproductcataloglambda1E6192C7",
                  },
                ],
              ],
            },
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "NS1DNSentry": {
      "Properties": {
        "Name": "product-catalog.guardianapis.com",
        "RecordType": "CNAME",
        "ResourceRecords": [
          "dualstack.guardian.map.fastly.net",
        ],
        "Stage": "PROD",
        "TTL": 3600,
      },
      "Type": "Guardian::DNS::RecordSet",
    },
    "PutMetricPolicy702DBD41": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "support-service-lambdas",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PutMetricPolicy702DBD41",
        "Roles": [
          {
            "Ref": "generateproductcataloglambdaServiceRole5FF40E84",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "S3inlinepolicy3B07399A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3::*:membership-dist/support/PROD/generate-product-catalog/",
                "arn:aws:s3::*:gu-zuora-catalog/PROD/Zuora-PROD/*",
              ],
            },
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::gu-product-catalog/PROD/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "S3inlinepolicy3B07399A",
        "Roles": [
          {
            "Ref": "generateproductcataloglambdaServiceRole5FF40E84",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "failedSchemaValidationAlarm": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":alarms-handler-topic-PROD",
              ],
            ],
          },
        ],
        "AlarmDescription": "A run of the generate-product-catalog lambda generated a version of the product catalog which failed to validate against the current schema.
This version was not written to S3 to stop it causing errors with production applications, but this means that the catalog is out of date in some way.
Check the logs at https://eu-west-1.console.aws.amazon.com/cloudwatch/home?region=eu-west-1#logsV2:log-groups/log-group/$252Faws$252Flambda$252Fgenerate-product-catalog-PROD to find the cause",
        "AlarmName": "The generate-product-catalog-PROD lambda generated a catalog which cannot be parsed by the current schema",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "Stage",
            "Value": "PROD",
          },
          {
            "Name": "App",
            "Value": "generate-product-catalog",
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "failed-schema-validation",
        "Namespace": "support-service-lambdas",
        "Period": 60,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "generateproductcataloglambda1E6192C7": {
      "DependsOn": [
        "generateproductcataloglambdaServiceRoleDefaultPolicy68C46CDA",
        "generateproductcataloglambdaServiceRole5FF40E84",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "support/PROD/generate-product-catalog/generate-product-catalog.zip",
        },
        "Description": "A lambda to generate the Guardian product catalog from the Zuora catalog",
        "Environment": {
          "Variables": {
            "APP": "generate-product-catalog",
            "NODE_OPTIONS": "--enable-source-maps",
            "STACK": "support",
            "STAGE": "PROD",
          },
        },
        "FunctionName": "generate-product-catalog-PROD",
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogFormat": "Text",
        },
        "MemorySize": 1232,
        "Role": {
          "Fn::GetAtt": [
            "generateproductcataloglambdaServiceRole5FF40E84",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "generateproductcataloglambdaServiceRole5FF40E84": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "generate-product-catalog",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-service-lambdas",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "generateproductcataloglambdaServiceRoleDefaultPolicy68C46CDA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/support/PROD/generate-product-catalog/generate-product-catalog.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/support/generate-product-catalog",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/support/generate-product-catalog/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "generateproductcataloglambdaServiceRoleDefaultPolicy68C46CDA",
        "Roles": [
          {
            "Ref": "generateproductcataloglambdaServiceRole5FF40E84",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "guzuoracatalogAllowBucketNotificationsTogenerateproductcatalogPRODgenerateproductcataloglambda747E1D6C6423E587": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "generateproductcataloglambda1E6192C7",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":s3:::gu-zuora-catalog",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "guzuoracatalogNotifications2A4398B4": {
      "DependsOn": [
        "guzuoracatalogAllowBucketNotificationsTogenerateproductcatalogPRODgenerateproductcataloglambda747E1D6C6423E587",
      ],
      "Properties": {
        "BucketName": "gu-zuora-catalog",
        "Managed": false,
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*",
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "prefix",
                      "Value": "PROD/Zuora-PROD",
                    },
                  ],
                },
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "generateproductcataloglambda1E6192C7",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
        "SkipDestinationValidation": false,
      },
      "Type": "Custom::S3BucketNotifications",
    },
  },
}
`;
